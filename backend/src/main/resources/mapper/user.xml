<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.ssafy.cooking.dao.UserDao">
 
	<select id="isDupEmail" parameterType="string" resultType="int">
		select count(user_id) from User where email = #{email}
	</select>
	
	<select id="isDupNickname" parameterType="string" resultType="int">
		select count(user_id) from User where nickname = #{nickname}
	</select>
	
	<insert id="signup" parameterType="User">
		insert into User(
						password
						, nickname
						, email
						<if test="profile_image != null and profile_image != ''">
							, profile_image
						</if>
						<if test="intro != null and intro != ''">
							, intro
						</if>
						, image_name
						, hits
						, create_date
					) values(
						#{password}
						, #{nickname}
						, #{email}
						<if test="profile_image != null and profile_image != ''">
							, #{profile_image}
						</if>
						<if test="intro != null and intro != ''">
							, #{intro}
						</if>
						, #{image_name}
						, 0
						, now()
					)
	</insert>
	
	<select id="signin" resultType="User">
		SELECT user_id, email, nickname, profile_image, intro
		FROM User
		WHERE email = #{email} AND password = #{password}
	</select>
	
	<delete id="delete">
		DELETE 
		FROM User 
		WHERE user_id = #{uid}
	</delete>
	
	<select id="getUser" resultType="User">
		SELECT user_id, email, nickname, profile_image, intro, image_name, start_page, create_date
		FROM User
		WHERE user_id = #{uid}
	</select>
	
	<update id="reviseUser" parameterType="User">
		UPDATE User
		SET nickname = #{nickname}
			, profile_image = #{profile_image}
			, intro = #{intro}
			, image_name = #{image_name}
			<if test="password != null and password != ''">
				, password = #{password}
			</if>
			, update_date = now()
			, start_page = #{start_page}
		WHERE user_id= #{user_id}
	</update>
	
	<select id="getFollowers" resultType="User">
		SELECT u.user_id, u.email, u.nickname, u.profile_image, u.image_name
		FROM User u
		JOIN Following f ON u.user_id = f.from_user
		WHERE f.to_user = #{uid};
	</select>
	
	<select id="getFollowings" resultType="User">
		SELECT u.user_id, u.email, u.nickname, u.profile_image, u.image_name
		FROM User u
		JOIN Following f ON u.user_id = f.to_user
		WHERE f.from_user = #{uid};
	</select>
	
	<select id="getCommnets" resultType="Comment">
		SELECT c.comment_id, c.comment_user as comment_user_id, u.nickname as comment_user_name,
		c.recipe_id, c.description, c.create_date, c.update_date
		FROM Comments c
		join User u on c.comment_user = u.user_id
		WHERE u.user_id = #{recipe_id}
	</select>
	
	<select id="checkPassword" parameterType="string" resultType="int">
		SELECT count(user_id)
		FROM User
		WHERE user_id = #{uid} AND password = #{password}
	</select>
	
	
	<update id="updatePasswordByEmail" parameterType="string">
		UPDATE User
		SET password = #{password}
		WHERE email = #{email}	
	</update>
	
	
	<select id="isConfirmedEmail" parameterType="string" resultType="int">
		SELECT count(email)
		FROM Email_confirm
		WHERE email = #{email} AND now() &lt; expire_date
	</select>
	
	<insert id="insertEmailConfirm" parameterType="string">
		INSERT into Email_confirm
			VALUES(#{email}, #{code}, now(), date_add(now(), interval 3 minute))
	</insert>
	
	<select id="checkConfirmCode" parameterType="EmailConfirm" resultType="int">
		SELECT count(email)
		FROM Email_confirm
		WHERE email = #{email} 
			AND code = #{code} 
			AND now() &lt; expire_date
	</select>
	
	<delete id="deleteConfirmCode" parameterType="string">
		DELETE from Email_confirm
		WHERE email = #{email}
	</delete>
	
	<select id="selectNextUserId" resultType="int">
		SELECT AUTO_INCREMENT
		FROM information_schema.tables
		WHERE table_name = 'User'
		AND table_schema = DATABASE()
	</select>
	
	
	<select id="getFilterings" parameterType="string" resultType="Filter">
		SELECT 	filtering_id, filtering_name, filtering_user as filtering_user_id, create_date
				, hate_large, hate_medium, hate_small
				, like_large, like_medium, like_small
		FROM 	Filtering
		WHERE	filtering_user = #{uid}
	</select>
	
	<insert id="insertFiltering" parameterType="Filter">
		INSERT	into Filtering(
					filtering_name
					, filtering_user
					, hate_large
					, hate_medium
					, hate_small
					, like_large
					, like_medium
					, like_small
				)
				values(
					#{filtering_name}
					, #{filtering_user_id}
					, #{hate_large}
					, #{hate_medium}
					, #{hate_small}
					, #{like_large}
					, #{like_medium}
					, #{like_small}
				)
	</insert>
	
	<delete id="deleteFiltering" parameterType="string">
		DELETE FROM Filtering
		WHERE filtering_id = #{id}
	
	</delete>
	
	<update id="plusBlogHits" parameterType="string">
		UPDATE User set hits = hits + 1
		WHERE user_id = #{uid}
	</update>
	
	
	<insert id="follow" parameterType="string">
		INSERT 	into Following(from_user, to_user)
				values(#{from}, #{to})
	</insert>
	
	<delete id="unfollow" parameterType="string">
		DELETE 	from Following
		WHERE 	1 = 1
				AND from_user = #{from} 
				AND to_user = #{to}
	</delete>
	
	
	<select id="getAllLinkedSNS" parameterType="string" resultType="SNS">
		SELECT sns_user, sns_name, sns_url, create_date
		FROM Linked_sns
		WHERE sns_user = #{uid}
	</select>
	
	<select id="getLinkedSNS" parameterType="string" resultType="SNS">
		SELECT sns_user, sns_name, sns_url
		FROM Linked_sns
		WHERE 	sns_user = #{uid} 
				and sns_name = #{name}
	</select>
	
	<insert id="insertLinkedSNS" parameterType="string">
		INSERT 	into Linked_sns(sns_user, sns_name, sns_url)
				values(#{uid}, #{name}, #{url})
	</insert>
	
	<update id="updateLinkedSNS" parameterType="string">
		UPDATE	Linked_sns
				set sns_name = #{name},
					sns_url = #{url}
		WHERE sns_user = #{uid}
	</update>
	
	<delete id="deleteLinkedSNS" parameterType="string">
		DELETE 	FROM Linked_sns
		WHERE 	1 = 1
				AND sns_user = #{uid}
				AND sns_name = #{name}
	</delete>
	
	
</mapper>
